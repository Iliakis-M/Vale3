"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Classes_1 = tslib_1.__importStar(require("../Classes"));
const discord_js_1 = require("discord.js");
exports.command = new Classes_1.default.Command({
    name: "urban",
    desc: "Fetch a slang definition",
    usage: "urban word<String>",
    exp: /^!urb(an)? .+$/msi,
    category: "Utility",
    data: {},
    body: async function body(message, vale) {
        let reply = Classes_1.default.failsafe.bind(message);
        try {
            message.channel.startTyping();
            let word, definitions = JSON.parse(await Classes_1.default.fetch("https://api.urbandictionary.com/v0/define?term=" + (word = encodeURIComponent(message.content.split(' ').slice(1).join(' '))))), embed = new discord_js_1.RichEmbed();
            embed.setTitle(word)
                .setDescription(`Definition(s) for ${word} [${definitions.list.length}]:`)
                .setColor("RANDOM")
                .setFooter("Powered by UrbanDict")
                .setAuthor("Vale3", vale.client.user.displayAvatarURL, "https://github.com/Valen-H/Vale-3")
                .setThumbnail(vale.client.user.avatarURL)
                .setTimestamp()
                .setURL("https://www.urbandictionary.com/define.php?term=" + word);
            if (definitions.list) {
                await Classes_1.chillout.forEach(definitions.list, (entry) => {
                    embed.addField(entry.word, `**${entry.definition}** [[By: *${entry.author}*, ${entry.thumbs_up}:thumbsup: ${entry.thumbs_down}:thumbsdown:]]\n- ${entry.example}`);
                });
            }
            reply({ embed }).then(() => message.channel.stopTyping());
        }
        catch (err) {
            reply("External API error, please try again later... https://www.urbandictionary.com/define.php?term=" + message.content.split(' ').slice(1).join(' '));
            console.error(err);
        }
    },
});
async function init(vale) {
    exports.command.usage = vale.opts.config.prefix + exports.command.usage;
    exports.command.exp = new RegExp('^' + vale.opts.config.prefix + "urb(an)? .+$", "msi");
    return exports.command;
} //init
exports.init = init;
exports.default = init;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJiYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvdXJiYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYiw4REFBK0M7QUFDL0MsMkNBQWdEO0FBRW5DLFFBQUEsT0FBTyxHQUFvQixJQUFJLGlCQUFPLENBQUMsT0FBTyxDQUFDO0lBQzNELElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLDBCQUEwQjtJQUNoQyxLQUFLLEVBQUUsb0JBQW9CO0lBQzNCLEdBQUcsRUFBRSxtQkFBbUI7SUFDeEIsUUFBUSxFQUFFLFNBQVM7SUFDbkIsSUFBSSxFQUFFLEVBQUc7SUFDVCxJQUFJLEVBQUUsS0FBSyxVQUFVLElBQUksQ0FBQyxPQUFnQixFQUFFLElBQWtCO1FBQzdELElBQUksS0FBSyxHQUFHLGlCQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUzQyxJQUFJO1lBQ0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUU5QixJQUFJLElBQVksRUFDZixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLGlCQUFPLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxHQUFHLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0ssS0FBSyxHQUFHLElBQUksc0JBQVMsRUFBRSxDQUFDO1lBRXpCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2lCQUNsQixjQUFjLENBQUMscUJBQXFCLElBQUksS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDO2lCQUN6RSxRQUFRLENBQUMsUUFBUSxDQUFDO2lCQUNsQixTQUFTLENBQUMsc0JBQXNCLENBQUM7aUJBQ2pDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsbUNBQW1DLENBQUM7aUJBQzFGLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7aUJBQ3hDLFlBQVksRUFBRTtpQkFDZCxNQUFNLENBQUMsa0RBQWtELEdBQUcsSUFBSSxDQUFDLENBQUM7WUFFcEUsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFO2dCQUNyQixNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFtRyxFQUFFLEVBQUU7b0JBQ2hKLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxVQUFVLGFBQWEsS0FBSyxDQUFDLE1BQU0sTUFBTSxLQUFLLENBQUMsU0FBUyxjQUFjLEtBQUssQ0FBQyxXQUFXLHFCQUFxQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDcEssQ0FBQyxDQUFDLENBQUM7YUFDSDtZQUVELEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUMxRDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ2IsS0FBSyxDQUFDLGdHQUFnRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN4SixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0lBQ0YsQ0FBQztDQUNELENBQUMsQ0FBQztBQUVJLEtBQUssVUFBVSxJQUFJLENBQUMsSUFBa0I7SUFDNUMsZUFBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsZUFBTyxDQUFDLEtBQUssQ0FBQztJQUN4RCxlQUFPLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRWhGLE9BQU8sZUFBTyxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxNQUFNO0FBTFIsb0JBS0M7QUFFRCxrQkFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCBDbGFzc2VzLCB7IGNoaWxsb3V0IH0gZnJvbSBcIi4uL0NsYXNzZXNcIjtcclxuaW1wb3J0IHsgTWVzc2FnZSwgUmljaEVtYmVkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21tYW5kOiBDbGFzc2VzLkNvbW1hbmQgPSBuZXcgQ2xhc3Nlcy5Db21tYW5kKHtcclxuXHRuYW1lOiBcInVyYmFuXCIsXHJcblx0ZGVzYzogXCJGZXRjaCBhIHNsYW5nIGRlZmluaXRpb25cIixcclxuXHR1c2FnZTogXCJ1cmJhbiB3b3JkPFN0cmluZz5cIixcclxuXHRleHA6IC9eIXVyYihhbik/IC4rJC9tc2ksXHJcblx0Y2F0ZWdvcnk6IFwiVXRpbGl0eVwiLFxyXG5cdGRhdGE6IHsgfSxcclxuXHRib2R5OiBhc3luYyBmdW5jdGlvbiBib2R5KG1lc3NhZ2U6IE1lc3NhZ2UsIHZhbGU6IENsYXNzZXMuVmFsZSk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0bGV0IHJlcGx5ID0gQ2xhc3Nlcy5mYWlsc2FmZS5iaW5kKG1lc3NhZ2UpO1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdG1lc3NhZ2UuY2hhbm5lbC5zdGFydFR5cGluZygpO1xyXG5cclxuXHRcdFx0bGV0IHdvcmQ6IHN0cmluZyxcclxuXHRcdFx0XHRkZWZpbml0aW9ucyA9IEpTT04ucGFyc2UoYXdhaXQgQ2xhc3Nlcy5mZXRjaChcImh0dHBzOi8vYXBpLnVyYmFuZGljdGlvbmFyeS5jb20vdjAvZGVmaW5lP3Rlcm09XCIgKyAod29yZCA9IGVuY29kZVVSSUNvbXBvbmVudChtZXNzYWdlLmNvbnRlbnQuc3BsaXQoJyAnKS5zbGljZSgxKS5qb2luKCcgJykpKSkpLFxyXG5cdFx0XHRcdGVtYmVkID0gbmV3IFJpY2hFbWJlZCgpO1xyXG5cclxuXHRcdFx0ZW1iZWQuc2V0VGl0bGUod29yZClcclxuXHRcdFx0XHQuc2V0RGVzY3JpcHRpb24oYERlZmluaXRpb24ocykgZm9yICR7d29yZH0gWyR7ZGVmaW5pdGlvbnMubGlzdC5sZW5ndGh9XTpgKVxyXG5cdFx0XHRcdC5zZXRDb2xvcihcIlJBTkRPTVwiKVxyXG5cdFx0XHRcdC5zZXRGb290ZXIoXCJQb3dlcmVkIGJ5IFVyYmFuRGljdFwiKVxyXG5cdFx0XHRcdC5zZXRBdXRob3IoXCJWYWxlM1wiLCB2YWxlLmNsaWVudC51c2VyLmRpc3BsYXlBdmF0YXJVUkwsIFwiaHR0cHM6Ly9naXRodWIuY29tL1ZhbGVuLUgvVmFsZS0zXCIpXHJcblx0XHRcdFx0LnNldFRodW1ibmFpbCh2YWxlLmNsaWVudC51c2VyLmF2YXRhclVSTClcclxuXHRcdFx0XHQuc2V0VGltZXN0YW1wKClcclxuXHRcdFx0XHQuc2V0VVJMKFwiaHR0cHM6Ly93d3cudXJiYW5kaWN0aW9uYXJ5LmNvbS9kZWZpbmUucGhwP3Rlcm09XCIgKyB3b3JkKTtcclxuXHRcdFx0XHJcblx0XHRcdGlmIChkZWZpbml0aW9ucy5saXN0KSB7XHJcblx0XHRcdFx0YXdhaXQgY2hpbGxvdXQuZm9yRWFjaChkZWZpbml0aW9ucy5saXN0LCAoZW50cnk6IHsgd29yZDogYW55OyBkZWZpbml0aW9uOiBhbnk7IGF1dGhvcjogYW55OyB0aHVtYnNfdXA6IGFueTsgdGh1bWJzX2Rvd246IGFueTsgZXhhbXBsZTogYW55OyB9KSA9PiB7XHJcblx0XHRcdFx0XHRlbWJlZC5hZGRGaWVsZChlbnRyeS53b3JkLCBgKioke2VudHJ5LmRlZmluaXRpb259KiogW1tCeTogKiR7ZW50cnkuYXV0aG9yfSosICR7ZW50cnkudGh1bWJzX3VwfTp0aHVtYnN1cDogJHtlbnRyeS50aHVtYnNfZG93bn06dGh1bWJzZG93bjpdXVxcbi0gJHtlbnRyeS5leGFtcGxlfWApO1xyXG5cdFx0XHRcdH0pO1xyXG5cdFx0XHR9XHJcblx0XHRcdFxyXG5cdFx0XHRyZXBseSh7IGVtYmVkIH0pLnRoZW4oKCkgPT4gbWVzc2FnZS5jaGFubmVsLnN0b3BUeXBpbmcoKSk7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0cmVwbHkoXCJFeHRlcm5hbCBBUEkgZXJyb3IsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuLi4gaHR0cHM6Ly93d3cudXJiYW5kaWN0aW9uYXJ5LmNvbS9kZWZpbmUucGhwP3Rlcm09XCIgKyBtZXNzYWdlLmNvbnRlbnQuc3BsaXQoJyAnKS5zbGljZSgxKS5qb2luKCcgJykpO1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKGVycik7XHJcblx0XHR9XHJcblx0fSwgLy9ib2R5XHJcbn0pO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXQodmFsZTogQ2xhc3Nlcy5WYWxlKTogUHJvbWlzZTxDbGFzc2VzLkNvbW1hbmQ+IHtcclxuXHRjb21tYW5kLnVzYWdlID0gdmFsZS5vcHRzLmNvbmZpZy5wcmVmaXggKyBjb21tYW5kLnVzYWdlO1xyXG5cdGNvbW1hbmQuZXhwID0gbmV3IFJlZ0V4cCgnXicgKyB2YWxlLm9wdHMuY29uZmlnLnByZWZpeCArIFwidXJiKGFuKT8gLiskXCIsIFwibXNpXCIpO1xyXG5cclxuXHRyZXR1cm4gY29tbWFuZDtcclxufSAvL2luaXRcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGluaXQ7XHJcblxyXG4vKmZvcjogdGVzdFxyXG57XHJcbiAgbGlzdDogW1xyXG5cdHtcclxuXHQgIGRlZmluaXRpb246ICcxLiB0aGUgbWFpbiBjYXVzZSBvZiBbZXhwbG9zaW9uc10uXFxyJyArXHJcblx0XHQnXFxuMi4gYW55IHRoaW5nIFtkcmVhZGVkXSB0aGF0IHlvdXIgXCJ0ZWFjaGVyc1wiIHNheSBpcyBcImdvb2RcIiAnICtcclxuXHRcdCdmb3IgeW91LiBzb29uIGFmdGVyLCB5b3UgZXhwbG9kZSBmb3Igbm8gcmVhc29uLlxccicgK1xyXG5cdFx0J1xcbjMuIHdoYXQgc2NpZW50aXN0cyBkbyB0byBtYWtlIHN0dWZmIGV4cGxvZGUuXFxyJyArXHJcblx0XHQnXFxuNC4gd2hlbiBhIHNoZWV0IG9mIHBhcGVyIGV4cGxvZGVzIGludG8gW2ZsYW1lc10uJyxcclxuXHQgIHBlcm1hbGluazogJ2h0dHA6Ly90ZXN0LnVyYmFudXAuY29tLzE4NzYyMzInLFxyXG5cdCAgdGh1bWJzX3VwOiAxNDIsXHJcblx0ICBzb3VuZF91cmxzOiBbXSxcclxuXHQgIGF1dGhvcjogJ21vbm4tdW5pdCcsXHJcbj5cclxuXHQgIGRlZmlkOiAxODc2MjMyLFxyXG5cdCAgY3VycmVudF92b3RlOiAnJyxcclxuXHQgIHdyaXR0ZW5fb246ICcyMDA2LTA3LTIyVDAwOjAwOjAwLjAwMFonLFxyXG5cdCAgZXhhbXBsZTogJzEuIHRlc3QgW3NvZGl1bV0gYW5kIHdhdGVyLlxccicgK1xyXG5cdFx0J1xcbjIuIFNBVCBpcyBhIHRlc3QuXFxyJyArXHJcblx0XHQnXFxuMy4gW01vbmtleXNdLlxccicgK1xyXG5cdFx0J1xcbjQuIHlvdSBicm91Z2h0IHlvdXIgW2xpZ2h0ZXJdIHRvIHRlc3QuJyxcclxuXHQgIHRodW1ic19kb3duOiA0MFxyXG5cdH0sXHJcblx0e1xyXG5cdCAgZGVmaW5pdGlvbjogJ0V2ZXJ5dGhpbmcgdGhhdCBpcyBbcHV0IGluXSBbZnJvbnRdIG9mIHlvdSBkdXJpbmcgYW55IGdpdmVuIFtkYXldLiAnLFxyXG5cdCAgcGVybWFsaW5rOiAnaHR0cDovL3Rlc3QudXJiYW51cC5jb20vMjA4MTMwNycsXHJcblx0ICB0aHVtYnNfdXA6IDUzLFxyXG5cdCAgc291bmRfdXJsczogW10sXHJcblx0ICBhdXRob3I6ICdWSUNLSSBLQVJNQScsXHJcblx0ICB3b3JkOiAnVEVTVCcsXHJcblx0ICBkZWZpZDogMjA4MTMwNyxcclxuXHQgIGN1cnJlbnRfdm90ZTogJycsXHJcblx0ICB3cml0dGVuX29uOiAnMjAwNi0xMS0xMFQwMDowMDowMC4wMDBaJyxcclxuXHQgIGV4YW1wbGU6ICdIb3cgd2FzIHlvdXIgZGF5P1xccicgK1xyXG5cdFx0J1xcbltUZXN0aW5nXSEuLi5idXQgaSBkaWQgd2VsbCBhdCBub3QgW3Bhc3NpbmddIGV2ZXJ5ICcgK1xyXG5cdFx0J3Rlc3QhLi4uSG9wZSBpIGdldCBhIFtiZXR0ZXIgcnVuXSB0b21vcnJvdy4gJyxcclxuXHQgIHRodW1ic19kb3duOiAxN1xyXG5cdH0sXHJcbiAgXVxyXG59XHJcbiovXHJcbiJdfQ==