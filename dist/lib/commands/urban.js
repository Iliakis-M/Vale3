"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Classes_1 = tslib_1.__importStar(require("../Classes"));
const discord_js_1 = require("discord.js");
exports.command = new Classes_1.default.Command({
    name: "urban",
    desc: "Fetch a slang definition",
    usage: "!urban word<String>",
    exp: /^!urb(an)? .+$/msi,
    category: "Utility",
    data: {},
    body: async function body(message, vale) {
        let reply = Classes_1.default.failsafe.bind(message);
        try {
            let word, definitions = JSON.parse(await Classes_1.default.fetch("https://api.urbandictionary.com/v0/define?term=" + (word = encodeURIComponent(message.content.split(' ').slice(1).join(' '))))), embed = new discord_js_1.RichEmbed();
            embed.setTitle(word)
                .setDescription(`Definition(s) for ${word} [${definitions.list.length}]:`)
                .setColor("RANDOM")
                .setFooter("Powered by UrbanDict")
                .setAuthor("Vale3", vale.client.user.displayAvatarURL, "https://github.com/Valen-H/Vale-3")
                .setThumbnail(vale.client.user.avatarURL)
                .setTimestamp()
                .setURL("https://www.urbandictionary.com/define.php?term=" + word);
            if (definitions.list) {
                await Classes_1.chillout.forEach(definitions.list, (entry) => {
                    embed.addField(entry.word, `**${entry.definition}** [[By: *${entry.author}*, ${entry.thumbs_up}:thumbsup: ${entry.thumbs_down}:thumbsdown:]]\n- ${entry.example}`);
                });
            }
            reply({ embed });
        }
        catch (err) {
            reply("External API error, please try again later... https://www.urbandictionary.com/define.php?term=" + message.content.split(' ').slice(1).join(' '));
            console.error(err);
        }
    },
});
async function init(vale) {
    exports.command.usage = vale.opts.config.prefix + exports.command.usage;
    exports.command.exp = new RegExp('^' + vale.opts.config.prefix + "urb(an)? .+$", "msi");
    return exports.command;
} //init
exports.init = init;
exports.default = init;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJiYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvdXJiYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYiw4REFBK0M7QUFDL0MsMkNBQWdEO0FBRW5DLFFBQUEsT0FBTyxHQUFvQixJQUFJLGlCQUFPLENBQUMsT0FBTyxDQUFDO0lBQzNELElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLDBCQUEwQjtJQUNoQyxLQUFLLEVBQUUscUJBQXFCO0lBQzVCLEdBQUcsRUFBRSxtQkFBbUI7SUFDeEIsUUFBUSxFQUFFLFNBQVM7SUFDbkIsSUFBSSxFQUFFLEVBQUc7SUFDVCxJQUFJLEVBQUUsS0FBSyxVQUFVLElBQUksQ0FBQyxPQUFnQixFQUFFLElBQWtCO1FBQzdELElBQUksS0FBSyxHQUFHLGlCQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUzQyxJQUFJO1lBQ0gsSUFBSSxJQUFZLEVBQ2YsV0FBVyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxpQkFBTyxDQUFDLEtBQUssQ0FBQyxpREFBaUQsR0FBRyxDQUFDLElBQUksR0FBRyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzdLLEtBQUssR0FBRyxJQUFJLHNCQUFTLEVBQUUsQ0FBQztZQUV6QixLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztpQkFDbEIsY0FBYyxDQUFDLHFCQUFxQixJQUFJLEtBQUssV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQztpQkFDekUsUUFBUSxDQUFDLFFBQVEsQ0FBQztpQkFDbEIsU0FBUyxDQUFDLHNCQUFzQixDQUFDO2lCQUNqQyxTQUFTLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLG1DQUFtQyxDQUFDO2lCQUMxRixZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO2lCQUN4QyxZQUFZLEVBQUU7aUJBQ2QsTUFBTSxDQUFDLGtEQUFrRCxHQUFHLElBQUksQ0FBQyxDQUFDO1lBRXBFLElBQUksV0FBVyxDQUFDLElBQUksRUFBRTtnQkFDckIsTUFBTSxrQkFBUSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBbUcsRUFBRSxFQUFFO29CQUNoSixLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxLQUFLLENBQUMsVUFBVSxhQUFhLEtBQUssQ0FBQyxNQUFNLE1BQU0sS0FBSyxDQUFDLFNBQVMsY0FBYyxLQUFLLENBQUMsV0FBVyxxQkFBcUIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7Z0JBQ3BLLENBQUMsQ0FBQyxDQUFDO2FBQ0g7WUFFRCxLQUFLLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO1NBQ2pCO1FBQUMsT0FBTyxHQUFHLEVBQUU7WUFDYixLQUFLLENBQUMsZ0dBQWdHLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ3hKLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbkI7SUFDRixDQUFDO0NBQ0QsQ0FBQyxDQUFDO0FBRUksS0FBSyxVQUFVLElBQUksQ0FBQyxJQUFrQjtJQUM1QyxlQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxlQUFPLENBQUMsS0FBSyxDQUFDO0lBQ3hELGVBQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFaEYsT0FBTyxlQUFPLENBQUM7QUFDaEIsQ0FBQyxDQUFDLE1BQU07QUFMUixvQkFLQztBQUVELGtCQUFlLElBQUksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuaW1wb3J0IENsYXNzZXMsIHsgY2hpbGxvdXQgfSBmcm9tIFwiLi4vQ2xhc3Nlc1wiO1xyXG5pbXBvcnQgeyBNZXNzYWdlLCBSaWNoRW1iZWQgfSBmcm9tIFwiZGlzY29yZC5qc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IGNvbW1hbmQ6IENsYXNzZXMuQ29tbWFuZCA9IG5ldyBDbGFzc2VzLkNvbW1hbmQoe1xyXG5cdG5hbWU6IFwidXJiYW5cIixcclxuXHRkZXNjOiBcIkZldGNoIGEgc2xhbmcgZGVmaW5pdGlvblwiLFxyXG5cdHVzYWdlOiBcIiF1cmJhbiB3b3JkPFN0cmluZz5cIixcclxuXHRleHA6IC9eIXVyYihhbik/IC4rJC9tc2ksXHJcblx0Y2F0ZWdvcnk6IFwiVXRpbGl0eVwiLFxyXG5cdGRhdGE6IHsgfSxcclxuXHRib2R5OiBhc3luYyBmdW5jdGlvbiBib2R5KG1lc3NhZ2U6IE1lc3NhZ2UsIHZhbGU6IENsYXNzZXMuVmFsZSk6IFByb21pc2U8dm9pZD4ge1xyXG5cdFx0bGV0IHJlcGx5ID0gQ2xhc3Nlcy5mYWlsc2FmZS5iaW5kKG1lc3NhZ2UpO1xyXG5cclxuXHRcdHRyeSB7XHJcblx0XHRcdGxldCB3b3JkOiBzdHJpbmcsXHJcblx0XHRcdFx0ZGVmaW5pdGlvbnMgPSBKU09OLnBhcnNlKGF3YWl0IENsYXNzZXMuZmV0Y2goXCJodHRwczovL2FwaS51cmJhbmRpY3Rpb25hcnkuY29tL3YwL2RlZmluZT90ZXJtPVwiICsgKHdvcmQgPSBlbmNvZGVVUklDb21wb25lbnQobWVzc2FnZS5jb250ZW50LnNwbGl0KCcgJykuc2xpY2UoMSkuam9pbignICcpKSkpKSxcclxuXHRcdFx0XHRlbWJlZCA9IG5ldyBSaWNoRW1iZWQoKTtcclxuXHJcblx0XHRcdGVtYmVkLnNldFRpdGxlKHdvcmQpXHJcblx0XHRcdFx0LnNldERlc2NyaXB0aW9uKGBEZWZpbml0aW9uKHMpIGZvciAke3dvcmR9IFske2RlZmluaXRpb25zLmxpc3QubGVuZ3RofV06YClcclxuXHRcdFx0XHQuc2V0Q29sb3IoXCJSQU5ET01cIilcclxuXHRcdFx0XHQuc2V0Rm9vdGVyKFwiUG93ZXJlZCBieSBVcmJhbkRpY3RcIilcclxuXHRcdFx0XHQuc2V0QXV0aG9yKFwiVmFsZTNcIiwgdmFsZS5jbGllbnQudXNlci5kaXNwbGF5QXZhdGFyVVJMLCBcImh0dHBzOi8vZ2l0aHViLmNvbS9WYWxlbi1IL1ZhbGUtM1wiKVxyXG5cdFx0XHRcdC5zZXRUaHVtYm5haWwodmFsZS5jbGllbnQudXNlci5hdmF0YXJVUkwpXHJcblx0XHRcdFx0LnNldFRpbWVzdGFtcCgpXHJcblx0XHRcdFx0LnNldFVSTChcImh0dHBzOi8vd3d3LnVyYmFuZGljdGlvbmFyeS5jb20vZGVmaW5lLnBocD90ZXJtPVwiICsgd29yZCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAoZGVmaW5pdGlvbnMubGlzdCkge1xyXG5cdFx0XHRcdGF3YWl0IGNoaWxsb3V0LmZvckVhY2goZGVmaW5pdGlvbnMubGlzdCwgKGVudHJ5OiB7IHdvcmQ6IGFueTsgZGVmaW5pdGlvbjogYW55OyBhdXRob3I6IGFueTsgdGh1bWJzX3VwOiBhbnk7IHRodW1ic19kb3duOiBhbnk7IGV4YW1wbGU6IGFueTsgfSkgPT4ge1xyXG5cdFx0XHRcdFx0ZW1iZWQuYWRkRmllbGQoZW50cnkud29yZCwgYCoqJHtlbnRyeS5kZWZpbml0aW9ufSoqIFtbQnk6ICoke2VudHJ5LmF1dGhvcn0qLCAke2VudHJ5LnRodW1ic191cH06dGh1bWJzdXA6ICR7ZW50cnkudGh1bWJzX2Rvd259OnRodW1ic2Rvd246XV1cXG4tICR7ZW50cnkuZXhhbXBsZX1gKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0cmVwbHkoeyBlbWJlZCB9KTtcclxuXHRcdH0gY2F0Y2ggKGVycikge1xyXG5cdFx0XHRyZXBseShcIkV4dGVybmFsIEFQSSBlcnJvciwgcGxlYXNlIHRyeSBhZ2FpbiBsYXRlci4uLiBodHRwczovL3d3dy51cmJhbmRpY3Rpb25hcnkuY29tL2RlZmluZS5waHA/dGVybT1cIiArIG1lc3NhZ2UuY29udGVudC5zcGxpdCgnICcpLnNsaWNlKDEpLmpvaW4oJyAnKSk7XHJcblx0XHRcdGNvbnNvbGUuZXJyb3IoZXJyKTtcclxuXHRcdH1cclxuXHR9LCAvL2JvZHlcclxufSk7XHJcblxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdCh2YWxlOiBDbGFzc2VzLlZhbGUpOiBQcm9taXNlPENsYXNzZXMuQ29tbWFuZD4ge1xyXG5cdGNvbW1hbmQudXNhZ2UgPSB2YWxlLm9wdHMuY29uZmlnLnByZWZpeCArIGNvbW1hbmQudXNhZ2U7XHJcblx0Y29tbWFuZC5leHAgPSBuZXcgUmVnRXhwKCdeJyArIHZhbGUub3B0cy5jb25maWcucHJlZml4ICsgXCJ1cmIoYW4pPyAuKyRcIiwgXCJtc2lcIik7XHJcblxyXG5cdHJldHVybiBjb21tYW5kO1xyXG59IC8vaW5pdFxyXG5cclxuZXhwb3J0IGRlZmF1bHQgaW5pdDtcclxuXHJcbi8qZm9yOiB0ZXN0XHJcbntcclxuICBsaXN0OiBbXHJcblx0e1xyXG5cdCAgZGVmaW5pdGlvbjogJzEuIHRoZSBtYWluIGNhdXNlIG9mIFtleHBsb3Npb25zXS5cXHInICtcclxuXHRcdCdcXG4yLiBhbnkgdGhpbmcgW2RyZWFkZWRdIHRoYXQgeW91ciBcInRlYWNoZXJzXCIgc2F5IGlzIFwiZ29vZFwiICcgK1xyXG5cdFx0J2ZvciB5b3UuIHNvb24gYWZ0ZXIsIHlvdSBleHBsb2RlIGZvciBubyByZWFzb24uXFxyJyArXHJcblx0XHQnXFxuMy4gd2hhdCBzY2llbnRpc3RzIGRvIHRvIG1ha2Ugc3R1ZmYgZXhwbG9kZS5cXHInICtcclxuXHRcdCdcXG40LiB3aGVuIGEgc2hlZXQgb2YgcGFwZXIgZXhwbG9kZXMgaW50byBbZmxhbWVzXS4nLFxyXG5cdCAgcGVybWFsaW5rOiAnaHR0cDovL3Rlc3QudXJiYW51cC5jb20vMTg3NjIzMicsXHJcblx0ICB0aHVtYnNfdXA6IDE0MixcclxuXHQgIHNvdW5kX3VybHM6IFtdLFxyXG5cdCAgYXV0aG9yOiAnbW9ubi11bml0JyxcclxuPlxyXG5cdCAgZGVmaWQ6IDE4NzYyMzIsXHJcblx0ICBjdXJyZW50X3ZvdGU6ICcnLFxyXG5cdCAgd3JpdHRlbl9vbjogJzIwMDYtMDctMjJUMDA6MDA6MDAuMDAwWicsXHJcblx0ICBleGFtcGxlOiAnMS4gdGVzdCBbc29kaXVtXSBhbmQgd2F0ZXIuXFxyJyArXHJcblx0XHQnXFxuMi4gU0FUIGlzIGEgdGVzdC5cXHInICtcclxuXHRcdCdcXG4zLiBbTW9ua2V5c10uXFxyJyArXHJcblx0XHQnXFxuNC4geW91IGJyb3VnaHQgeW91ciBbbGlnaHRlcl0gdG8gdGVzdC4nLFxyXG5cdCAgdGh1bWJzX2Rvd246IDQwXHJcblx0fSxcclxuXHR7XHJcblx0ICBkZWZpbml0aW9uOiAnRXZlcnl0aGluZyB0aGF0IGlzIFtwdXQgaW5dIFtmcm9udF0gb2YgeW91IGR1cmluZyBhbnkgZ2l2ZW4gW2RheV0uICcsXHJcblx0ICBwZXJtYWxpbms6ICdodHRwOi8vdGVzdC51cmJhbnVwLmNvbS8yMDgxMzA3JyxcclxuXHQgIHRodW1ic191cDogNTMsXHJcblx0ICBzb3VuZF91cmxzOiBbXSxcclxuXHQgIGF1dGhvcjogJ1ZJQ0tJIEtBUk1BJyxcclxuXHQgIHdvcmQ6ICdURVNUJyxcclxuXHQgIGRlZmlkOiAyMDgxMzA3LFxyXG5cdCAgY3VycmVudF92b3RlOiAnJyxcclxuXHQgIHdyaXR0ZW5fb246ICcyMDA2LTExLTEwVDAwOjAwOjAwLjAwMFonLFxyXG5cdCAgZXhhbXBsZTogJ0hvdyB3YXMgeW91ciBkYXk/XFxyJyArXHJcblx0XHQnXFxuW1Rlc3RpbmddIS4uLmJ1dCBpIGRpZCB3ZWxsIGF0IG5vdCBbcGFzc2luZ10gZXZlcnkgJyArXHJcblx0XHQndGVzdCEuLi5Ib3BlIGkgZ2V0IGEgW2JldHRlciBydW5dIHRvbW9ycm93LiAnLFxyXG5cdCAgdGh1bWJzX2Rvd246IDE3XHJcblx0fSxcclxuICBdXHJcbn1cclxuKi9cclxuIl19