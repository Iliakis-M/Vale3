"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Classes_1 = tslib_1.__importStar(require("../Classes"));
const discord_js_1 = require("discord.js");
exports.command = new Classes_1.default.Command({
    name: "urban",
    desc: "Fetch a slang definition",
    usage: "!urban word<String>",
    exp: /^!urb(an)? .+$/msi,
    category: "Utility",
    data: {},
    body: async function body(message, vale) {
        let reply = Classes_1.default.failsafe.bind(message);
        try {
            message.channel.startTyping();
            let word, definitions = JSON.parse(await Classes_1.default.fetch("https://api.urbandictionary.com/v0/define?term=" + (word = encodeURIComponent(message.content.split(' ').slice(1).join(' '))))), embed = new discord_js_1.RichEmbed();
            embed.setTitle(word)
                .setDescription(`Definition(s) for ${word} [${definitions.list.length}]:`)
                .setColor("RANDOM")
                .setFooter("Powered by UrbanDict")
                .setAuthor("Vale3", vale.client.user.displayAvatarURL, "https://github.com/Valen-H/Vale-3")
                .setThumbnail(vale.client.user.avatarURL)
                .setTimestamp()
                .setURL("https://www.urbandictionary.com/define.php?term=" + word);
            if (definitions.list) {
                await Classes_1.chillout.forEach(definitions.list, (entry) => {
                    embed.addField(entry.word, `**${entry.definition}** [[By: *${entry.author}*, ${entry.thumbs_up}:thumbsup: ${entry.thumbs_down}:thumbsdown:]]\n- ${entry.example}`);
                });
            }
            reply({ embed }).then(() => message.channel.stopTyping());
        }
        catch (err) {
            reply("External API error, please try again later... https://www.urbandictionary.com/define.php?term=" + message.content.split(' ').slice(1).join(' '));
            console.error(err);
        }
    },
});
async function init(vale) {
    exports.command.usage = vale.opts.config.prefix + exports.command.usage;
    exports.command.exp = new RegExp('^' + vale.opts.config.prefix + "urb(an)? .+$", "msi");
    return exports.command;
} //init
exports.init = init;
exports.default = init;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJiYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvdXJiYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYiw4REFBK0M7QUFDL0MsMkNBQWdEO0FBRW5DLFFBQUEsT0FBTyxHQUFvQixJQUFJLGlCQUFPLENBQUMsT0FBTyxDQUFDO0lBQzNELElBQUksRUFBRSxPQUFPO0lBQ2IsSUFBSSxFQUFFLDBCQUEwQjtJQUNoQyxLQUFLLEVBQUUscUJBQXFCO0lBQzVCLEdBQUcsRUFBRSxtQkFBbUI7SUFDeEIsUUFBUSxFQUFFLFNBQVM7SUFDbkIsSUFBSSxFQUFFLEVBQUc7SUFDVCxJQUFJLEVBQUUsS0FBSyxVQUFVLElBQUksQ0FBQyxPQUFnQixFQUFFLElBQWtCO1FBQzdELElBQUksS0FBSyxHQUFHLGlCQUFPLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUUzQyxJQUFJO1lBQ0gsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUU5QixJQUFJLElBQVksRUFDZixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLGlCQUFPLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxHQUFHLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0ssS0FBSyxHQUFHLElBQUksc0JBQVMsRUFBRSxDQUFDO1lBRXpCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2lCQUNsQixjQUFjLENBQUMscUJBQXFCLElBQUksS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDO2lCQUN6RSxRQUFRLENBQUMsUUFBUSxDQUFDO2lCQUNsQixTQUFTLENBQUMsc0JBQXNCLENBQUM7aUJBQ2pDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsbUNBQW1DLENBQUM7aUJBQzFGLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7aUJBQ3hDLFlBQVksRUFBRTtpQkFDZCxNQUFNLENBQUMsa0RBQWtELEdBQUcsSUFBSSxDQUFDLENBQUM7WUFFcEUsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFO2dCQUNyQixNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFtRyxFQUFFLEVBQUU7b0JBQ2hKLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxVQUFVLGFBQWEsS0FBSyxDQUFDLE1BQU0sTUFBTSxLQUFLLENBQUMsU0FBUyxjQUFjLEtBQUssQ0FBQyxXQUFXLHFCQUFxQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDcEssQ0FBQyxDQUFDLENBQUM7YUFDSDtZQUVELEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztTQUMxRDtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ2IsS0FBSyxDQUFDLGdHQUFnRyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUN4SixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ25CO0lBQ0YsQ0FBQztDQUNELENBQUMsQ0FBQztBQUVJLEtBQUssVUFBVSxJQUFJLENBQUMsSUFBa0I7SUFDNUMsZUFBTyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsZUFBTyxDQUFDLEtBQUssQ0FBQztJQUN4RCxlQUFPLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRWhGLE9BQU8sZUFBTyxDQUFDO0FBQ2hCLENBQUMsQ0FBQyxNQUFNO0FBTFIsb0JBS0M7QUFFRCxrQkFBZSxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCBDbGFzc2VzLCB7IGNoaWxsb3V0IH0gZnJvbSBcIi4uL0NsYXNzZXNcIjtcclxuaW1wb3J0IHsgTWVzc2FnZSwgUmljaEVtYmVkIH0gZnJvbSBcImRpc2NvcmQuanNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBjb21tYW5kOiBDbGFzc2VzLkNvbW1hbmQgPSBuZXcgQ2xhc3Nlcy5Db21tYW5kKHtcclxuXHRuYW1lOiBcInVyYmFuXCIsXHJcblx0ZGVzYzogXCJGZXRjaCBhIHNsYW5nIGRlZmluaXRpb25cIixcclxuXHR1c2FnZTogXCIhdXJiYW4gd29yZDxTdHJpbmc+XCIsXHJcblx0ZXhwOiAvXiF1cmIoYW4pPyAuKyQvbXNpLFxyXG5cdGNhdGVnb3J5OiBcIlV0aWxpdHlcIixcclxuXHRkYXRhOiB7IH0sXHJcblx0Ym9keTogYXN5bmMgZnVuY3Rpb24gYm9keShtZXNzYWdlOiBNZXNzYWdlLCB2YWxlOiBDbGFzc2VzLlZhbGUpOiBQcm9taXNlPHZvaWQ+IHtcclxuXHRcdGxldCByZXBseSA9IENsYXNzZXMuZmFpbHNhZmUuYmluZChtZXNzYWdlKTtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHRtZXNzYWdlLmNoYW5uZWwuc3RhcnRUeXBpbmcoKTtcclxuXHJcblx0XHRcdGxldCB3b3JkOiBzdHJpbmcsXHJcblx0XHRcdFx0ZGVmaW5pdGlvbnMgPSBKU09OLnBhcnNlKGF3YWl0IENsYXNzZXMuZmV0Y2goXCJodHRwczovL2FwaS51cmJhbmRpY3Rpb25hcnkuY29tL3YwL2RlZmluZT90ZXJtPVwiICsgKHdvcmQgPSBlbmNvZGVVUklDb21wb25lbnQobWVzc2FnZS5jb250ZW50LnNwbGl0KCcgJykuc2xpY2UoMSkuam9pbignICcpKSkpKSxcclxuXHRcdFx0XHRlbWJlZCA9IG5ldyBSaWNoRW1iZWQoKTtcclxuXHJcblx0XHRcdGVtYmVkLnNldFRpdGxlKHdvcmQpXHJcblx0XHRcdFx0LnNldERlc2NyaXB0aW9uKGBEZWZpbml0aW9uKHMpIGZvciAke3dvcmR9IFske2RlZmluaXRpb25zLmxpc3QubGVuZ3RofV06YClcclxuXHRcdFx0XHQuc2V0Q29sb3IoXCJSQU5ET01cIilcclxuXHRcdFx0XHQuc2V0Rm9vdGVyKFwiUG93ZXJlZCBieSBVcmJhbkRpY3RcIilcclxuXHRcdFx0XHQuc2V0QXV0aG9yKFwiVmFsZTNcIiwgdmFsZS5jbGllbnQudXNlci5kaXNwbGF5QXZhdGFyVVJMLCBcImh0dHBzOi8vZ2l0aHViLmNvbS9WYWxlbi1IL1ZhbGUtM1wiKVxyXG5cdFx0XHRcdC5zZXRUaHVtYm5haWwodmFsZS5jbGllbnQudXNlci5hdmF0YXJVUkwpXHJcblx0XHRcdFx0LnNldFRpbWVzdGFtcCgpXHJcblx0XHRcdFx0LnNldFVSTChcImh0dHBzOi8vd3d3LnVyYmFuZGljdGlvbmFyeS5jb20vZGVmaW5lLnBocD90ZXJtPVwiICsgd29yZCk7XHJcblx0XHRcdFxyXG5cdFx0XHRpZiAoZGVmaW5pdGlvbnMubGlzdCkge1xyXG5cdFx0XHRcdGF3YWl0IGNoaWxsb3V0LmZvckVhY2goZGVmaW5pdGlvbnMubGlzdCwgKGVudHJ5OiB7IHdvcmQ6IGFueTsgZGVmaW5pdGlvbjogYW55OyBhdXRob3I6IGFueTsgdGh1bWJzX3VwOiBhbnk7IHRodW1ic19kb3duOiBhbnk7IGV4YW1wbGU6IGFueTsgfSkgPT4ge1xyXG5cdFx0XHRcdFx0ZW1iZWQuYWRkRmllbGQoZW50cnkud29yZCwgYCoqJHtlbnRyeS5kZWZpbml0aW9ufSoqIFtbQnk6ICoke2VudHJ5LmF1dGhvcn0qLCAke2VudHJ5LnRodW1ic191cH06dGh1bWJzdXA6ICR7ZW50cnkudGh1bWJzX2Rvd259OnRodW1ic2Rvd246XV1cXG4tICR7ZW50cnkuZXhhbXBsZX1gKTtcclxuXHRcdFx0XHR9KTtcclxuXHRcdFx0fVxyXG5cdFx0XHRcclxuXHRcdFx0cmVwbHkoeyBlbWJlZCB9KS50aGVuKCgpID0+IG1lc3NhZ2UuY2hhbm5lbC5zdG9wVHlwaW5nKCkpO1xyXG5cdFx0fSBjYXRjaCAoZXJyKSB7XHJcblx0XHRcdHJlcGx5KFwiRXh0ZXJuYWwgQVBJIGVycm9yLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyLi4uIGh0dHBzOi8vd3d3LnVyYmFuZGljdGlvbmFyeS5jb20vZGVmaW5lLnBocD90ZXJtPVwiICsgbWVzc2FnZS5jb250ZW50LnNwbGl0KCcgJykuc2xpY2UoMSkuam9pbignICcpKTtcclxuXHRcdFx0Y29uc29sZS5lcnJvcihlcnIpO1xyXG5cdFx0fVxyXG5cdH0sIC8vYm9keVxyXG59KTtcclxuXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0KHZhbGU6IENsYXNzZXMuVmFsZSk6IFByb21pc2U8Q2xhc3Nlcy5Db21tYW5kPiB7XHJcblx0Y29tbWFuZC51c2FnZSA9IHZhbGUub3B0cy5jb25maWcucHJlZml4ICsgY29tbWFuZC51c2FnZTtcclxuXHRjb21tYW5kLmV4cCA9IG5ldyBSZWdFeHAoJ14nICsgdmFsZS5vcHRzLmNvbmZpZy5wcmVmaXggKyBcInVyYihhbik/IC4rJFwiLCBcIm1zaVwiKTtcclxuXHJcblx0cmV0dXJuIGNvbW1hbmQ7XHJcbn0gLy9pbml0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0O1xyXG5cclxuLypmb3I6IHRlc3Rcclxue1xyXG4gIGxpc3Q6IFtcclxuXHR7XHJcblx0ICBkZWZpbml0aW9uOiAnMS4gdGhlIG1haW4gY2F1c2Ugb2YgW2V4cGxvc2lvbnNdLlxccicgK1xyXG5cdFx0J1xcbjIuIGFueSB0aGluZyBbZHJlYWRlZF0gdGhhdCB5b3VyIFwidGVhY2hlcnNcIiBzYXkgaXMgXCJnb29kXCIgJyArXHJcblx0XHQnZm9yIHlvdS4gc29vbiBhZnRlciwgeW91IGV4cGxvZGUgZm9yIG5vIHJlYXNvbi5cXHInICtcclxuXHRcdCdcXG4zLiB3aGF0IHNjaWVudGlzdHMgZG8gdG8gbWFrZSBzdHVmZiBleHBsb2RlLlxccicgK1xyXG5cdFx0J1xcbjQuIHdoZW4gYSBzaGVldCBvZiBwYXBlciBleHBsb2RlcyBpbnRvIFtmbGFtZXNdLicsXHJcblx0ICBwZXJtYWxpbms6ICdodHRwOi8vdGVzdC51cmJhbnVwLmNvbS8xODc2MjMyJyxcclxuXHQgIHRodW1ic191cDogMTQyLFxyXG5cdCAgc291bmRfdXJsczogW10sXHJcblx0ICBhdXRob3I6ICdtb25uLXVuaXQnLFxyXG4+XHJcblx0ICBkZWZpZDogMTg3NjIzMixcclxuXHQgIGN1cnJlbnRfdm90ZTogJycsXHJcblx0ICB3cml0dGVuX29uOiAnMjAwNi0wNy0yMlQwMDowMDowMC4wMDBaJyxcclxuXHQgIGV4YW1wbGU6ICcxLiB0ZXN0IFtzb2RpdW1dIGFuZCB3YXRlci5cXHInICtcclxuXHRcdCdcXG4yLiBTQVQgaXMgYSB0ZXN0LlxccicgK1xyXG5cdFx0J1xcbjMuIFtNb25rZXlzXS5cXHInICtcclxuXHRcdCdcXG40LiB5b3UgYnJvdWdodCB5b3VyIFtsaWdodGVyXSB0byB0ZXN0LicsXHJcblx0ICB0aHVtYnNfZG93bjogNDBcclxuXHR9LFxyXG5cdHtcclxuXHQgIGRlZmluaXRpb246ICdFdmVyeXRoaW5nIHRoYXQgaXMgW3B1dCBpbl0gW2Zyb250XSBvZiB5b3UgZHVyaW5nIGFueSBnaXZlbiBbZGF5XS4gJyxcclxuXHQgIHBlcm1hbGluazogJ2h0dHA6Ly90ZXN0LnVyYmFudXAuY29tLzIwODEzMDcnLFxyXG5cdCAgdGh1bWJzX3VwOiA1MyxcclxuXHQgIHNvdW5kX3VybHM6IFtdLFxyXG5cdCAgYXV0aG9yOiAnVklDS0kgS0FSTUEnLFxyXG5cdCAgd29yZDogJ1RFU1QnLFxyXG5cdCAgZGVmaWQ6IDIwODEzMDcsXHJcblx0ICBjdXJyZW50X3ZvdGU6ICcnLFxyXG5cdCAgd3JpdHRlbl9vbjogJzIwMDYtMTEtMTBUMDA6MDA6MDAuMDAwWicsXHJcblx0ICBleGFtcGxlOiAnSG93IHdhcyB5b3VyIGRheT9cXHInICtcclxuXHRcdCdcXG5bVGVzdGluZ10hLi4uYnV0IGkgZGlkIHdlbGwgYXQgbm90IFtwYXNzaW5nXSBldmVyeSAnICtcclxuXHRcdCd0ZXN0IS4uLkhvcGUgaSBnZXQgYSBbYmV0dGVyIHJ1bl0gdG9tb3Jyb3cuICcsXHJcblx0ICB0aHVtYnNfZG93bjogMTdcclxuXHR9LFxyXG4gIF1cclxufVxyXG4qL1xyXG4iXX0=