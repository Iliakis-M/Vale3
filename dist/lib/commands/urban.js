"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const Classes_1 = tslib_1.__importStar(require("../Classes"));
const discord_js_1 = require("discord.js");
exports.command = new Classes_1.default.Command({
    name: "urban",
    desc: "Fetch a slang definition",
    usage: "!urban word<String>",
    exp: /^!urb(an)? .+$/msi,
    category: "Utility",
    data: {},
    body: async function body(message, vale) {
        let reply = Classes_1.default.failsafe.bind(message);
        try {
            let word, definitions = JSON.parse(await Classes_1.default.fetch("https://api.urbandictionary.com/v0/define?term=" + (word = encodeURIComponent(message.content.split(' ').slice(1).join(' '))))), embed = new discord_js_1.RichEmbed();
            embed.setTitle(word)
                .setDescription(`Definition(s) for ${word} [${definitions.list.length}]:`)
                .setColor("RANDOM")
                .setFooter("Powered by UrbanDict")
                .setAuthor("Vale3", vale.client.user.displayAvatarURL, "https://github.com/Valen-H/Vale-3")
                .setThumbnail(vale.client.user.avatarURL)
                .setTimestamp()
                .setURL("https://www.urbandictionary.com/define.php?term=" + word);
            if (definitions.list) {
                await Classes_1.chillout.forEach(definitions.list, (entry) => {
                    embed.addField(entry.word, `**${entry.definition}** [[By: *${entry.author}*, ${entry.thumbs_up}:thumbsup: ${entry.thumbs_down}:thumbsdown:]]\n- ${entry.example}`);
                });
            }
            reply({ embed });
        }
        catch (err) {
            reply("External API error, please try again later... https://www.urbandictionary.com/define.php?term=" + message.content.split(' ').slice(1).join(' '));
            console.error(err);
        }
    },
});
async function init(vale) {
    exports.command.usage = vale.opts.config.prefix + exports.command.usage;
    exports.command.exp = new RegExp('^' + vale.opts.config.prefix + "urb(an)? .+$", "msi");
    return exports.command;
} //init
exports.init = init;
exports.default = init;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJiYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvdXJiYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDOzs7QUFFYiw4REFBK0M7QUFDL0MsMkNBQWdEO0FBRW5DLFFBQUEsT0FBTyxHQUFHLElBQUksaUJBQU8sQ0FBQyxPQUFPLENBQUM7SUFDMUMsSUFBSSxFQUFFLE9BQU87SUFDYixJQUFJLEVBQUUsMEJBQTBCO0lBQ2hDLEtBQUssRUFBRSxxQkFBcUI7SUFDNUIsR0FBRyxFQUFFLG1CQUFtQjtJQUN4QixRQUFRLEVBQUUsU0FBUztJQUNuQixJQUFJLEVBQUUsRUFBRztJQUNULElBQUksRUFBRSxLQUFLLFVBQVUsSUFBSSxDQUFDLE9BQWdCLEVBQUUsSUFBbUI7UUFDOUQsSUFBSSxLQUFLLEdBQUcsaUJBQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRTNDLElBQUk7WUFDSCxJQUFJLElBQVksRUFDZixXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLGlCQUFPLENBQUMsS0FBSyxDQUFDLGlEQUFpRCxHQUFHLENBQUMsSUFBSSxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0ssS0FBSyxHQUFHLElBQUksc0JBQVMsRUFBRSxDQUFDO1lBRXpCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2lCQUNsQixjQUFjLENBQUMscUJBQXFCLElBQUksS0FBSyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDO2lCQUN6RSxRQUFRLENBQUMsUUFBUSxDQUFDO2lCQUNsQixTQUFTLENBQUMsc0JBQXNCLENBQUM7aUJBQ2pDLFNBQVMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsbUNBQW1DLENBQUM7aUJBQzFGLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7aUJBQ3hDLFlBQVksRUFBRTtpQkFDZCxNQUFNLENBQUMsa0RBQWtELEdBQUcsSUFBSSxDQUFDLENBQUM7WUFFcEUsSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFO2dCQUNyQixNQUFNLGtCQUFRLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFtRyxFQUFFLEVBQUU7b0JBQ2hKLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEtBQUssQ0FBQyxVQUFVLGFBQWEsS0FBSyxDQUFDLE1BQU0sTUFBTSxLQUFLLENBQUMsU0FBUyxjQUFjLEtBQUssQ0FBQyxXQUFXLHFCQUFxQixLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQztnQkFDcEssQ0FBQyxDQUFDLENBQUM7YUFDSDtZQUVELEtBQUssQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDakI7UUFBQyxPQUFPLEdBQUcsRUFBRTtZQUNiLEtBQUssQ0FBQyxnR0FBZ0csR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDeEosT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuQjtJQUNGLENBQUM7Q0FDRCxDQUFDLENBQUM7QUFFSSxLQUFLLFVBQVUsSUFBSSxDQUFDLElBQWtCO0lBQzVDLGVBQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLGVBQU8sQ0FBQyxLQUFLLENBQUM7SUFDeEQsZUFBTyxDQUFDLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVoRixPQUFPLGVBQU8sQ0FBQztBQUNoQixDQUFDLENBQUMsTUFBTTtBQUxSLG9CQUtDO0FBRUQsa0JBQWUsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgQ2xhc3NlcywgeyBjaGlsbG91dCB9IGZyb20gXCIuLi9DbGFzc2VzXCI7XHJcbmltcG9ydCB7IE1lc3NhZ2UsIFJpY2hFbWJlZCB9IGZyb20gXCJkaXNjb3JkLmpzXCI7XHJcblxyXG5leHBvcnQgY29uc3QgY29tbWFuZCA9IG5ldyBDbGFzc2VzLkNvbW1hbmQoe1xyXG5cdG5hbWU6IFwidXJiYW5cIixcclxuXHRkZXNjOiBcIkZldGNoIGEgc2xhbmcgZGVmaW5pdGlvblwiLFxyXG5cdHVzYWdlOiBcIiF1cmJhbiB3b3JkPFN0cmluZz5cIixcclxuXHRleHA6IC9eIXVyYihhbik/IC4rJC9tc2ksXHJcblx0Y2F0ZWdvcnk6IFwiVXRpbGl0eVwiLFxyXG5cdGRhdGE6IHsgfSxcclxuXHRib2R5OiBhc3luYyBmdW5jdGlvbiBib2R5KG1lc3NhZ2U6IE1lc3NhZ2UsIHZhbGU/OiBDbGFzc2VzLlZhbGUpIHtcclxuXHRcdGxldCByZXBseSA9IENsYXNzZXMuZmFpbHNhZmUuYmluZChtZXNzYWdlKTtcclxuXHJcblx0XHR0cnkge1xyXG5cdFx0XHRsZXQgd29yZDogc3RyaW5nLFxyXG5cdFx0XHRcdGRlZmluaXRpb25zID0gSlNPTi5wYXJzZShhd2FpdCBDbGFzc2VzLmZldGNoKFwiaHR0cHM6Ly9hcGkudXJiYW5kaWN0aW9uYXJ5LmNvbS92MC9kZWZpbmU/dGVybT1cIiArICh3b3JkID0gZW5jb2RlVVJJQ29tcG9uZW50KG1lc3NhZ2UuY29udGVudC5zcGxpdCgnICcpLnNsaWNlKDEpLmpvaW4oJyAnKSkpKSksXHJcblx0XHRcdFx0ZW1iZWQgPSBuZXcgUmljaEVtYmVkKCk7XHJcblxyXG5cdFx0XHRlbWJlZC5zZXRUaXRsZSh3b3JkKVxyXG5cdFx0XHRcdC5zZXREZXNjcmlwdGlvbihgRGVmaW5pdGlvbihzKSBmb3IgJHt3b3JkfSBbJHtkZWZpbml0aW9ucy5saXN0Lmxlbmd0aH1dOmApXHJcblx0XHRcdFx0LnNldENvbG9yKFwiUkFORE9NXCIpXHJcblx0XHRcdFx0LnNldEZvb3RlcihcIlBvd2VyZWQgYnkgVXJiYW5EaWN0XCIpXHJcblx0XHRcdFx0LnNldEF1dGhvcihcIlZhbGUzXCIsIHZhbGUuY2xpZW50LnVzZXIuZGlzcGxheUF2YXRhclVSTCwgXCJodHRwczovL2dpdGh1Yi5jb20vVmFsZW4tSC9WYWxlLTNcIilcclxuXHRcdFx0XHQuc2V0VGh1bWJuYWlsKHZhbGUuY2xpZW50LnVzZXIuYXZhdGFyVVJMKVxyXG5cdFx0XHRcdC5zZXRUaW1lc3RhbXAoKVxyXG5cdFx0XHRcdC5zZXRVUkwoXCJodHRwczovL3d3dy51cmJhbmRpY3Rpb25hcnkuY29tL2RlZmluZS5waHA/dGVybT1cIiArIHdvcmQpO1xyXG5cdFx0XHRcclxuXHRcdFx0aWYgKGRlZmluaXRpb25zLmxpc3QpIHtcclxuXHRcdFx0XHRhd2FpdCBjaGlsbG91dC5mb3JFYWNoKGRlZmluaXRpb25zLmxpc3QsIChlbnRyeTogeyB3b3JkOiBhbnk7IGRlZmluaXRpb246IGFueTsgYXV0aG9yOiBhbnk7IHRodW1ic191cDogYW55OyB0aHVtYnNfZG93bjogYW55OyBleGFtcGxlOiBhbnk7IH0pID0+IHtcclxuXHRcdFx0XHRcdGVtYmVkLmFkZEZpZWxkKGVudHJ5LndvcmQsIGAqKiR7ZW50cnkuZGVmaW5pdGlvbn0qKiBbW0J5OiAqJHtlbnRyeS5hdXRob3J9KiwgJHtlbnRyeS50aHVtYnNfdXB9OnRodW1ic3VwOiAke2VudHJ5LnRodW1ic19kb3dufTp0aHVtYnNkb3duOl1dXFxuLSAke2VudHJ5LmV4YW1wbGV9YCk7XHJcblx0XHRcdFx0fSk7XHJcblx0XHRcdH1cclxuXHRcdFx0XHJcblx0XHRcdHJlcGx5KHsgZW1iZWQgfSk7XHJcblx0XHR9IGNhdGNoIChlcnIpIHtcclxuXHRcdFx0cmVwbHkoXCJFeHRlcm5hbCBBUEkgZXJyb3IsIHBsZWFzZSB0cnkgYWdhaW4gbGF0ZXIuLi4gaHR0cHM6Ly93d3cudXJiYW5kaWN0aW9uYXJ5LmNvbS9kZWZpbmUucGhwP3Rlcm09XCIgKyBtZXNzYWdlLmNvbnRlbnQuc3BsaXQoJyAnKS5zbGljZSgxKS5qb2luKCcgJykpO1xyXG5cdFx0XHRjb25zb2xlLmVycm9yKGVycik7XHJcblx0XHR9XHJcblx0fSwgLy9ib2R5XHJcbn0pO1xyXG5cclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluaXQodmFsZTogQ2xhc3Nlcy5WYWxlKSB7XHJcblx0Y29tbWFuZC51c2FnZSA9IHZhbGUub3B0cy5jb25maWcucHJlZml4ICsgY29tbWFuZC51c2FnZTtcclxuXHRjb21tYW5kLmV4cCA9IG5ldyBSZWdFeHAoJ14nICsgdmFsZS5vcHRzLmNvbmZpZy5wcmVmaXggKyBcInVyYihhbik/IC4rJFwiLCBcIm1zaVwiKTtcclxuXHJcblx0cmV0dXJuIGNvbW1hbmQ7XHJcbn0gLy9pbml0XHJcblxyXG5leHBvcnQgZGVmYXVsdCBpbml0O1xyXG5cclxuLypmb3I6IHRlc3Rcclxue1xyXG4gIGxpc3Q6IFtcclxuXHR7XHJcblx0ICBkZWZpbml0aW9uOiAnMS4gdGhlIG1haW4gY2F1c2Ugb2YgW2V4cGxvc2lvbnNdLlxccicgK1xyXG5cdFx0J1xcbjIuIGFueSB0aGluZyBbZHJlYWRlZF0gdGhhdCB5b3VyIFwidGVhY2hlcnNcIiBzYXkgaXMgXCJnb29kXCIgJyArXHJcblx0XHQnZm9yIHlvdS4gc29vbiBhZnRlciwgeW91IGV4cGxvZGUgZm9yIG5vIHJlYXNvbi5cXHInICtcclxuXHRcdCdcXG4zLiB3aGF0IHNjaWVudGlzdHMgZG8gdG8gbWFrZSBzdHVmZiBleHBsb2RlLlxccicgK1xyXG5cdFx0J1xcbjQuIHdoZW4gYSBzaGVldCBvZiBwYXBlciBleHBsb2RlcyBpbnRvIFtmbGFtZXNdLicsXHJcblx0ICBwZXJtYWxpbms6ICdodHRwOi8vdGVzdC51cmJhbnVwLmNvbS8xODc2MjMyJyxcclxuXHQgIHRodW1ic191cDogMTQyLFxyXG5cdCAgc291bmRfdXJsczogW10sXHJcblx0ICBhdXRob3I6ICdtb25uLXVuaXQnLFxyXG4+XHJcblx0ICBkZWZpZDogMTg3NjIzMixcclxuXHQgIGN1cnJlbnRfdm90ZTogJycsXHJcblx0ICB3cml0dGVuX29uOiAnMjAwNi0wNy0yMlQwMDowMDowMC4wMDBaJyxcclxuXHQgIGV4YW1wbGU6ICcxLiB0ZXN0IFtzb2RpdW1dIGFuZCB3YXRlci5cXHInICtcclxuXHRcdCdcXG4yLiBTQVQgaXMgYSB0ZXN0LlxccicgK1xyXG5cdFx0J1xcbjMuIFtNb25rZXlzXS5cXHInICtcclxuXHRcdCdcXG40LiB5b3UgYnJvdWdodCB5b3VyIFtsaWdodGVyXSB0byB0ZXN0LicsXHJcblx0ICB0aHVtYnNfZG93bjogNDBcclxuXHR9LFxyXG5cdHtcclxuXHQgIGRlZmluaXRpb246ICdFdmVyeXRoaW5nIHRoYXQgaXMgW3B1dCBpbl0gW2Zyb250XSBvZiB5b3UgZHVyaW5nIGFueSBnaXZlbiBbZGF5XS4gJyxcclxuXHQgIHBlcm1hbGluazogJ2h0dHA6Ly90ZXN0LnVyYmFudXAuY29tLzIwODEzMDcnLFxyXG5cdCAgdGh1bWJzX3VwOiA1MyxcclxuXHQgIHNvdW5kX3VybHM6IFtdLFxyXG5cdCAgYXV0aG9yOiAnVklDS0kgS0FSTUEnLFxyXG5cdCAgd29yZDogJ1RFU1QnLFxyXG5cdCAgZGVmaWQ6IDIwODEzMDcsXHJcblx0ICBjdXJyZW50X3ZvdGU6ICcnLFxyXG5cdCAgd3JpdHRlbl9vbjogJzIwMDYtMTEtMTBUMDA6MDA6MDAuMDAwWicsXHJcblx0ICBleGFtcGxlOiAnSG93IHdhcyB5b3VyIGRheT9cXHInICtcclxuXHRcdCdcXG5bVGVzdGluZ10hLi4uYnV0IGkgZGlkIHdlbGwgYXQgbm90IFtwYXNzaW5nXSBldmVyeSAnICtcclxuXHRcdCd0ZXN0IS4uLkhvcGUgaSBnZXQgYSBbYmV0dGVyIHJ1bl0gdG9tb3Jyb3cuICcsXHJcblx0ICB0aHVtYnNfZG93bjogMTdcclxuXHR9LFxyXG4gIF1cclxufVxyXG4qL1xyXG4iXX0=