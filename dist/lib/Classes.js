"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const vale3_1 = tslib_1.__importDefault(require("./vale3"));
const Discord = tslib_1.__importStar(require("discord.js"));
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const events_1 = require("events");
const os_1 = require("os");
const util_1 = require("util");
const https_1 = require("https");
const chillout = tslib_1.__importStar(require("chillout"));
exports.chillout = chillout;
exports.chalk = require("chalk");
try {
    exports.stripAnsi = require("strip-ansi");
}
catch (opt) {
    exports.stripAnsi = (c) => c;
}
/**
 * VAL-1: TO BE USED BOTH WITH USER AND BOTS ACCOUNTS  - can make botnet
 * VAL-2: RELOAD ONLY MODIFIED MODULES/COMMANDS!  - external handling, _loadCMD supports singlefile
 * VAL-3: CLEAR UNDERLYING LOGSTRINGS PERIODICALLY
 * VAL-4: CACHEBANK AND NAMEDCACHEBANK IMPLEMENTATION  -
 */
var Classes;
(function (Classes) {
    let Errors;
    (function (Errors) {
        Errors.EBADSZ = new RangeError("Bad Size.");
    })(Errors = Classes.Errors || (Classes.Errors = {})); //Errors
    class Vale extends events_1.EventEmitter {
        constructor(opts = Vale.defaultOpts) {
            super();
            this.commands = new Map();
            let nopts = {};
            Object.assign(nopts, Vale.defaultOpts);
            Object.assign(nopts, opts);
            this.opts = nopts;
            this.client = new Discord.Client(opts.config.client);
            Object.defineProperty(this.client, "vale", {
                writable: false,
                value: this
            });
        } //ctor
        //@Override
        on(event, listener) {
            return super.on(event, listener);
        } //on
        //@Override
        once(event, listener) {
            return super.once(event, listener);
        } //once
        start() {
            vale3_1.default.setup(this);
            this.client.login(this.opts.token); //!destroy()
            return this;
        } //start
        async command(message) {
            try {
                let found = Array.from(this.commands.values()).find((cmd) => cmd.exp.test(message.content));
                if (found) {
                    //@ts-ignore
                    this._debug(exports.chalk.keyword("orange").dim(message.author.tag + " (" + message.channel.name + "  -  [ " + (message.guild || { name: "undefined" }).name + " ] )") + ":", exports.chalk.yellow(message.content), "---", exports.chalk.grey.dim(Date()));
                    return await found.body(message, this);
                }
            }
            catch (err) {
                return this._debug(exports.chalk.red(util_1.inspect(err)));
            }
        } //command
        _debug(...msg) {
            let prec;
            this._debuglog += (prec = msg.join(' ')) + " --- " + Date() + os_1.EOL;
            this.emit("log", prec);
            this.emit("rawlog", exports.stripAnsi(prec));
            if (this._panel && this._panel.sock)
                this._panel.sock.of("/admin").to("admin").send(exports.stripAnsi(prec));
            return prec;
        } //_debug
        async _loadCMD(from = "dist/lib/commands/") {
            let stats = await fs.stat(from);
            if (stats.isDirectory()) {
                let files = await fs.readdir(from);
                await chillout.forOf(files, async (file) => {
                    let comm, full;
                    try {
                        delete require.cache[require.resolve(full = path.resolve(path.join(from, file)))];
                        comm = require(full);
                        await comm.init(this);
                    }
                    catch (err) {
                        this._debug(exports.chalk.red(util_1.inspect(err)));
                        return;
                    }
                    this.commands.set(comm.command.name, comm.command);
                });
                this._debug(exports.chalk.cyan.dim("Loaded bot commands"), exports.chalk.grey.dim(" ---  " + Date()));
            }
            else {
                let comm, full;
                try {
                    delete require.cache[require.resolve(full = path.resolve(from))];
                    comm = require(full);
                    await comm.init(this);
                }
                catch (err) {
                    this._debug(exports.chalk.red(util_1.inspect(err)));
                    return this;
                }
                this.commands.set(comm.command.name, comm.command);
                this._debug(exports.chalk.cyan.dim("Loaded bot command: " + from), exports.chalk.grey.dim(" ---  " + Date()));
            }
            return this;
        } //_loadCMD
    } //Vale
    Vale.defaultOpts = {
        token: '',
        config: {
            prefix: '!',
            cust: "cust.config.json",
            client: {
                messageCacheLifetime: 1800,
                disableEveryone: true
            }
        },
        custconfig: {}
    };
    Classes.Vale = Vale;
    class Command {
        constructor(opts) {
            this.desc = '';
            this.usage = '';
            this.category = '';
            this.data = {};
            Object.assign(this, opts);
        } //ctor
        //@Override
        async body(message, vale) {
            //can support non-message commanding?
        } //body
        //@Override
        async _remove(vale) {
            //cleanup(?)
        } //_remove
    } //Command
    Classes.Command = Command;
    class CacheBank {
        constructor(name = "CacheBank-" + CacheBank.cntr++, size = 50, autopurge = true, reusables = true, source) {
            this.name = name;
            this.size = size;
            this.autopurge = autopurge;
            this.reusables = reusables;
            this.source = source;
            this.cache = [];
        } //ctor
        get(item) {
            if (this.cache.length === 0)
                throw Errors.EBADSZ;
            if (item === undefined || item === null) {
                let idx = Math.round(Math.random() * (this.cache.length - 1)), tmp = this.cache[idx];
                if (this.reusables === false)
                    this.cache.splice(idx, 1);
                return tmp.entry;
            }
            else {
                let tmp = this.cache[item];
                if (this.reusables === false)
                    this.cache.splice(item, 1);
                return tmp.entry;
            }
        } //get
        async purge(items = 1) {
            let out = [];
            this._arrange();
            await chillout.until(() => {
                out.push(this.cache.shift());
                if (!items--)
                    return chillout.StopIteration;
            });
            return out;
        } //purge
        push(item) {
            if (this.autopurge && this.cache.length === this.size - 1)
                this.purge();
            return this.cache.push({
                entry: item,
                timestamp: Date.now()
            });
        } //push
        _arrange() {
            return this.cache = this.cache.sort((a, b) => a.timestamp - b.timestamp);
        } //_arrange
        //@Override
        retrieve(...params) {
            //fetch from source
            return false;
        } //retrieve
    } //CacheBank
    CacheBank.cntr = 0;
    Classes.CacheBank = CacheBank;
    class NamedCacheBank {
        constructor(name = "NamedCacheBank-" + NamedCacheBank.cntr++, size = 50, source) {
            this.name = name;
            this.size = size;
            this.source = source;
            this.cache = new Map();
        } //ctor
        new_cache(...params) {
            let bank = new CacheBank(...params);
            this.cache.set(bank.name, bank);
            return bank;
        } //new_cache
        get(item) {
            return this.cache.get(item);
        } //get
        push(where, item) {
            return this.cache.get(where).push(item);
        } //push
        retrieve(...params) {
            //fetch from source
            return false;
        } //retrieve
    } //NamedCacheBank
    NamedCacheBank.cntr = 0;
    Classes.NamedCacheBank = NamedCacheBank;
    async function fetch(url) {
        return new Promise((res, rej) => {
            https_1.get(url, (resp) => {
                let reply = '';
                resp.on("data", (chunk) => {
                    reply += chunk;
                });
                resp.once("close", () => res(decodeURIComponent(reply)));
            }).once("error", rej);
        });
    } //fetch
    Classes.fetch = fetch;
    async function failsafe(...params) {
        try {
            let msg;
            try {
                msg = await this.reply(...params);
            }
            catch (err) {
                msg = await this.author.send(...params);
            }
            if (msg instanceof Discord.Message)
                msg.client["vale"]._debug(exports.chalk.keyword("orange")(msg.client.user.username + " (" + msg.channel["name"] + "  -  [ " + (msg.guild || { name: "undefined" }).name + " ] )") + ":", exports.chalk.yellow(msg.content), "---", exports.chalk.grey.dim(Date()));
            return msg;
        }
        catch (err) { }
    } //failsafe
    Classes.failsafe = failsafe;
})(Classes = exports.Classes || (exports.Classes = {})); //Classes
exports.default = Classes;
//# sourceMappingURL=data:application/json;base64,