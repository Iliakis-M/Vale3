"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const adm_panel2_1 = tslib_1.__importDefault(require("adm-panel2"));
const Classes_1 = tslib_1.__importDefault(require("./Classes"));
const fs = tslib_1.__importStar(require("fs-extra"));
const util_1 = require("util");
exports.chalk = require("chalk");
var Vale3;
(function (Vale3) {
    async function start(from) {
        let botopts = {
            token: (await fs.readFile(".token")).toString().trim(),
            config: JSON.parse((await fs.readFile("config.json")).toString())
        };
        try {
            botopts.custconfig = JSON.parse((await fs.readFile(botopts.config.cust)).toString());
        }
        catch (err) {
            botopts.custconfig = {
                panel: {} //!!!-1
            };
        }
        let bot = new Classes_1.default.Vale(botopts), panel = await adm_panel2_1.default.setup(botopts.custconfig.panel); //!!!-1
        bot._panel = panel;
        panel.toggleStats();
        panel.start().then(() => bot._debug("Panel Started."));
        bot.start();
        bot._loadCMD(from);
        return bot;
    } //start
    Vale3.start = start;
    async function setup(vale) {
        vale.client.on("ready", () => {
            vale._debug(exports.chalk `Connected as {greenBright ${vale.client.user.tag}}`);
            vale.client.user.setActivity(vale.opts.config.prefix + "help", {
                type: "LISTENING"
            });
            if (vale.opts.custconfig && vale.opts.custconfig.whook) {
                vale.client.fetchWebhook(vale.opts.custconfig.whook.id, vale.opts.custconfig.whook.token).then((whook) => {
                    vale.whook = whook;
                    whook.send(`Bot online.  ---  ${Date()}`, {
                        disableEveryone: true,
                        code: "JavaScript"
                    });
                });
            }
        });
        vale.on("log", (...msg) => {
            if (vale.whook) {
                vale.whook.send(`_Debug:  ${msg}  ---  ${Date()}`, {
                    disableEveryone: true,
                    code: "JavaScript"
                });
            }
        });
        vale.client.on("reconnecting", () => {
            vale._debug(exports.chalk `{cyan.dim Client reconnecting...}`);
        });
        vale.on("disconnect", (event) => {
            vale._debug(exports.chalk `{red Client Disconnected} | {cyan ${event.reason}}`);
        });
        vale.client.on("error", (error) => {
            vale._debug(exports.chalk.red.dim(`Connection Error: {redBright ${util_1.inspect(error)}}`));
        });
        vale.client.on("rateLimit", (rateLimitInfo) => {
            vale._debug(exports.chalk.grey.dim(`Rate Limit: limit(${rateLimitInfo.limit})  ${rateLimitInfo.method} ${rateLimitInfo.path}  -  ${rateLimitInfo.timeDifference}ms`));
        });
        vale.client.on("resume", (replayed) => {
            vale._debug(exports.chalk.grey.dim(`Resumed... (${replayed})`));
        });
        vale.client.on("warn", (info) => {
            vale._debug(exports.chalk.redBright.dim(info));
        });
        vale.client.on("message", (message) => {
            if (message.content.startsWith(vale.opts.config.prefix))
                vale.command(message);
        });
    } //setup
    Vale3.setup = setup;
})(Vale3 = exports.Vale3 || (exports.Vale3 = {})); //Vale3
exports.default = Vale3;
//# sourceMappingURL=data:application/json;base64,